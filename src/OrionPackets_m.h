//
// Generated file, do not edit! Created by nedtool 4.6 from OrionPackets.msg.
//

#ifndef _ORIONPACKETS_M_H_
#define _ORIONPACKETS_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "IPvXAddress.h"
#include "simtime_t.h"
// }}

/**
 * Enum generated from <tt>OrionPackets.msg:26</tt> by nedtool.
 * <pre>
 * enum OrionPacketType
 * {
 * 
 *     QUERY = 1;
 *     RESPONSE = 2;
 *     DATA_REQUEST = 3;
 *     DATA_REPLY = 4;
 *     DATA_REQUEST_ACK = 5;
 *     DATA_ERROR = 6;
 *     REP_REQUEST = 7;
 *     REP_CONFIRM = 8;
 *     REP_CONFIRM_ACK = 9;
 * }
 * </pre>
 */
enum OrionPacketType {
    QUERY = 1,
    RESPONSE = 2,
    DATA_REQUEST = 3,
    DATA_REPLY = 4,
    DATA_REQUEST_ACK = 5,
    DATA_ERROR = 6,
    REP_REQUEST = 7,
    REP_CONFIRM = 8,
    REP_CONFIRM_ACK = 9
};

/**
 * Class generated from <tt>OrionPackets.msg:42</tt> by nedtool.
 * <pre>
 * //
 * // Base packet for Orion Control Packets
 * //
 * packet OrionPacket extends cPacket
 * {
 *     unsigned int packetType;
 *     IPvXAddress DST;
 *     IPvXAddress SRC;
 *     string sourceId;
 *     IPvXAddress LastNode;
 *     string LastNodeId;
 *     IPvXAddress origin;
 *     unsigned int SEQ;
 *     string filename;
 *     unsigned int hopCount;
 *     string bid;
 *     simtime_t start;
 * 
 * }
 * </pre>
 */
class OrionPacket : public ::cPacket
{
  protected:
    unsigned int packetType_var;
    IPvXAddress DST_var;
    IPvXAddress SRC_var;
    opp_string sourceId_var;
    IPvXAddress LastNode_var;
    opp_string LastNodeId_var;
    IPvXAddress origin_var;
    unsigned int SEQ_var;
    opp_string filename_var;
    unsigned int hopCount_var;
    opp_string bid_var;
    simtime_t start_var;

  private:
    void copy(const OrionPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OrionPacket&);

  public:
    OrionPacket(const char *name=NULL, int kind=0);
    OrionPacket(const OrionPacket& other);
    virtual ~OrionPacket();
    OrionPacket& operator=(const OrionPacket& other);
    virtual OrionPacket *dup() const {return new OrionPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
    virtual IPvXAddress& getDST();
    virtual const IPvXAddress& getDST() const {return const_cast<OrionPacket*>(this)->getDST();}
    virtual void setDST(const IPvXAddress& DST);
    virtual IPvXAddress& getSRC();
    virtual const IPvXAddress& getSRC() const {return const_cast<OrionPacket*>(this)->getSRC();}
    virtual void setSRC(const IPvXAddress& SRC);
    virtual const char * getSourceId() const;
    virtual void setSourceId(const char * sourceId);
    virtual IPvXAddress& getLastNode();
    virtual const IPvXAddress& getLastNode() const {return const_cast<OrionPacket*>(this)->getLastNode();}
    virtual void setLastNode(const IPvXAddress& LastNode);
    virtual const char * getLastNodeId() const;
    virtual void setLastNodeId(const char * LastNodeId);
    virtual IPvXAddress& getOrigin();
    virtual const IPvXAddress& getOrigin() const {return const_cast<OrionPacket*>(this)->getOrigin();}
    virtual void setOrigin(const IPvXAddress& origin);
    virtual unsigned int getSEQ() const;
    virtual void setSEQ(unsigned int SEQ);
    virtual const char * getFilename() const;
    virtual void setFilename(const char * filename);
    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);
    virtual const char * getBid() const;
    virtual void setBid(const char * bid);
    virtual simtime_t getStart() const;
    virtual void setStart(simtime_t start);
};

inline void doPacking(cCommBuffer *b, OrionPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OrionPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>OrionPackets.msg:62</tt> by nedtool.
 * <pre>
 * //
 * // Represents an Orion Route Request
 * //
 * class OrionQueryPacket extends OrionPacket
 * {
 *     unsigned int packetType = QUERY;
 * 
 * 
 * }
 * </pre>
 */
class OrionQueryPacket : public ::OrionPacket
{
  protected:
    unsigned int packetType_var;

  private:
    void copy(const OrionQueryPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OrionQueryPacket&);

  public:
    OrionQueryPacket(const char *name=NULL);
    OrionQueryPacket(const OrionQueryPacket& other);
    virtual ~OrionQueryPacket();
    OrionQueryPacket& operator=(const OrionQueryPacket& other);
    virtual OrionQueryPacket *dup() const {return new OrionQueryPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
};

inline void doPacking(cCommBuffer *b, OrionQueryPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OrionQueryPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>OrionPackets.msg:69</tt> by nedtool.
 * <pre>
 * class OrionResponsePacket extends OrionPacket
 * {
 *     unsigned int packetType = RESPONSE;
 * 
 * }
 * </pre>
 */
class OrionResponsePacket : public ::OrionPacket
{
  protected:
    unsigned int packetType_var;

  private:
    void copy(const OrionResponsePacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OrionResponsePacket&);

  public:
    OrionResponsePacket(const char *name=NULL);
    OrionResponsePacket(const OrionResponsePacket& other);
    virtual ~OrionResponsePacket();
    OrionResponsePacket& operator=(const OrionResponsePacket& other);
    virtual OrionResponsePacket *dup() const {return new OrionResponsePacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
};

inline void doPacking(cCommBuffer *b, OrionResponsePacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OrionResponsePacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>OrionPackets.msg:75</tt> by nedtool.
 * <pre>
 * class OrionErrorPacket extends OrionPacket
 * {
 *     unsigned int packetType = DATA_ERROR;
 *     string requestId;
 * }
 * </pre>
 */
class OrionErrorPacket : public ::OrionPacket
{
  protected:
    unsigned int packetType_var;
    opp_string requestId_var;

  private:
    void copy(const OrionErrorPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OrionErrorPacket&);

  public:
    OrionErrorPacket(const char *name=NULL);
    OrionErrorPacket(const OrionErrorPacket& other);
    virtual ~OrionErrorPacket();
    OrionErrorPacket& operator=(const OrionErrorPacket& other);
    virtual OrionErrorPacket *dup() const {return new OrionErrorPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
    virtual const char * getRequestId() const;
    virtual void setRequestId(const char * requestId);
};

inline void doPacking(cCommBuffer *b, OrionErrorPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OrionErrorPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>OrionPackets.msg:85</tt> by nedtool.
 * <pre>
 * //
 * // Represents an Orion Route Reply
 * //
 * class OrionDataReqPacket extends OrionPacket
 * {
 *     unsigned int packetType = DATA_REQUEST;
 *     unsigned int retries;
 *     unsigned int block;
 * 
 * }
 * </pre>
 */
class OrionDataReqPacket : public ::OrionPacket
{
  protected:
    unsigned int packetType_var;
    unsigned int retries_var;
    unsigned int block_var;

  private:
    void copy(const OrionDataReqPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OrionDataReqPacket&);

  public:
    OrionDataReqPacket(const char *name=NULL);
    OrionDataReqPacket(const OrionDataReqPacket& other);
    virtual ~OrionDataReqPacket();
    OrionDataReqPacket& operator=(const OrionDataReqPacket& other);
    virtual OrionDataReqPacket *dup() const {return new OrionDataReqPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
    virtual unsigned int getRetries() const;
    virtual void setRetries(unsigned int retries);
    virtual unsigned int getBlock() const;
    virtual void setBlock(unsigned int block);
};

inline void doPacking(cCommBuffer *b, OrionDataReqPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OrionDataReqPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>OrionPackets.msg:93</tt> by nedtool.
 * <pre>
 * class OrionDataAckPacket extends OrionPacket
 * {
 *     unsigned int packetType = DATA_REQUEST_ACK;
 *     unsigned int retries;
 *     unsigned int block;
 * }
 * </pre>
 */
class OrionDataAckPacket : public ::OrionPacket
{
  protected:
    unsigned int packetType_var;
    unsigned int retries_var;
    unsigned int block_var;

  private:
    void copy(const OrionDataAckPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OrionDataAckPacket&);

  public:
    OrionDataAckPacket(const char *name=NULL);
    OrionDataAckPacket(const OrionDataAckPacket& other);
    virtual ~OrionDataAckPacket();
    OrionDataAckPacket& operator=(const OrionDataAckPacket& other);
    virtual OrionDataAckPacket *dup() const {return new OrionDataAckPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
    virtual unsigned int getRetries() const;
    virtual void setRetries(unsigned int retries);
    virtual unsigned int getBlock() const;
    virtual void setBlock(unsigned int block);
};

inline void doPacking(cCommBuffer *b, OrionDataAckPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OrionDataAckPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>OrionPackets.msg:103</tt> by nedtool.
 * <pre>
 * //
 * // Represents an Orion Route Error
 * //
 * class OrionDataRepPacket extends OrionPacket
 * {
 *     unsigned int packetType = DATA_REPLY;
 *     unsigned int block;
 *     int numCopiesRemaining;
 * 
 * 
 * }
 * </pre>
 */
class OrionDataRepPacket : public ::OrionPacket
{
  protected:
    unsigned int packetType_var;
    unsigned int block_var;
    int numCopiesRemaining_var;

  private:
    void copy(const OrionDataRepPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OrionDataRepPacket&);

  public:
    OrionDataRepPacket(const char *name=NULL);
    OrionDataRepPacket(const OrionDataRepPacket& other);
    virtual ~OrionDataRepPacket();
    OrionDataRepPacket& operator=(const OrionDataRepPacket& other);
    virtual OrionDataRepPacket *dup() const {return new OrionDataRepPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
    virtual unsigned int getBlock() const;
    virtual void setBlock(unsigned int block);
    virtual int getNumCopiesRemaining() const;
    virtual void setNumCopiesRemaining(int numCopiesRemaining);
};

inline void doPacking(cCommBuffer *b, OrionDataRepPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OrionDataRepPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>OrionPackets.msg:113</tt> by nedtool.
 * <pre>
 * class ReplicatePacket extends OrionPacket
 * {
 *     unsigned int packetType = REP_REQUEST;
 * }
 * </pre>
 */
class ReplicatePacket : public ::OrionPacket
{
  protected:
    unsigned int packetType_var;

  private:
    void copy(const ReplicatePacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ReplicatePacket&);

  public:
    ReplicatePacket(const char *name=NULL);
    ReplicatePacket(const ReplicatePacket& other);
    virtual ~ReplicatePacket();
    ReplicatePacket& operator=(const ReplicatePacket& other);
    virtual ReplicatePacket *dup() const {return new ReplicatePacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
};

inline void doPacking(cCommBuffer *b, ReplicatePacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ReplicatePacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>OrionPackets.msg:118</tt> by nedtool.
 * <pre>
 * class ReplicateConfirmPacket extends OrionPacket
 * {
 *     unsigned int packetType = REP_CONFIRM;
 * }
 * </pre>
 */
class ReplicateConfirmPacket : public ::OrionPacket
{
  protected:
    unsigned int packetType_var;

  private:
    void copy(const ReplicateConfirmPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ReplicateConfirmPacket&);

  public:
    ReplicateConfirmPacket(const char *name=NULL);
    ReplicateConfirmPacket(const ReplicateConfirmPacket& other);
    virtual ~ReplicateConfirmPacket();
    ReplicateConfirmPacket& operator=(const ReplicateConfirmPacket& other);
    virtual ReplicateConfirmPacket *dup() const {return new ReplicateConfirmPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
};

inline void doPacking(cCommBuffer *b, ReplicateConfirmPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ReplicateConfirmPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>OrionPackets.msg:123</tt> by nedtool.
 * <pre>
 * class ReplicateConfirmAckPacket extends OrionPacket
 * {
 *     unsigned int packetType = REP_CONFIRM_ACK;
 *     unsigned int numCopiesRemaining;
 * }
 * </pre>
 */
class ReplicateConfirmAckPacket : public ::OrionPacket
{
  protected:
    unsigned int packetType_var;
    unsigned int numCopiesRemaining_var;

  private:
    void copy(const ReplicateConfirmAckPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ReplicateConfirmAckPacket&);

  public:
    ReplicateConfirmAckPacket(const char *name=NULL);
    ReplicateConfirmAckPacket(const ReplicateConfirmAckPacket& other);
    virtual ~ReplicateConfirmAckPacket();
    ReplicateConfirmAckPacket& operator=(const ReplicateConfirmAckPacket& other);
    virtual ReplicateConfirmAckPacket *dup() const {return new ReplicateConfirmAckPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
    virtual unsigned int getNumCopiesRemaining() const;
    virtual void setNumCopiesRemaining(unsigned int numCopiesRemaining);
};

inline void doPacking(cCommBuffer *b, ReplicateConfirmAckPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ReplicateConfirmAckPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>OrionPackets.msg:132</tt> by nedtool.
 * <pre>
 * //
 * // Represents a timer for a Route Reply packet
 * //
 * message WaitForReq extends cMessage
 * {
 *     string filename;
 *     string bid;
 *     unsigned int block;
 * }
 * </pre>
 */
class WaitForReq : public ::cMessage
{
  protected:
    opp_string filename_var;
    opp_string bid_var;
    unsigned int block_var;

  private:
    void copy(const WaitForReq& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WaitForReq&);

  public:
    WaitForReq(const char *name=NULL, int kind=0);
    WaitForReq(const WaitForReq& other);
    virtual ~WaitForReq();
    WaitForReq& operator=(const WaitForReq& other);
    virtual WaitForReq *dup() const {return new WaitForReq(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getFilename() const;
    virtual void setFilename(const char * filename);
    virtual const char * getBid() const;
    virtual void setBid(const char * bid);
    virtual unsigned int getBlock() const;
    virtual void setBlock(unsigned int block);
};

inline void doPacking(cCommBuffer *b, WaitForReq& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, WaitForReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>OrionPackets.msg:139</tt> by nedtool.
 * <pre>
 * message DelayMsg extends cMessage
 * {
 *     string bid;
 *     bool broadcast;
 *     bool deleteMe;
 * 
 * }
 * </pre>
 */
class DelayMsg : public ::cMessage
{
  protected:
    opp_string bid_var;
    bool broadcast_var;
    bool deleteMe_var;

  private:
    void copy(const DelayMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DelayMsg&);

  public:
    DelayMsg(const char *name=NULL, int kind=0);
    DelayMsg(const DelayMsg& other);
    virtual ~DelayMsg();
    DelayMsg& operator=(const DelayMsg& other);
    virtual DelayMsg *dup() const {return new DelayMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getBid() const;
    virtual void setBid(const char * bid);
    virtual bool getBroadcast() const;
    virtual void setBroadcast(bool broadcast);
    virtual bool getDeleteMe() const;
    virtual void setDeleteMe(bool deleteMe);
};

inline void doPacking(cCommBuffer *b, DelayMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DelayMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>OrionPackets.msg:147</tt> by nedtool.
 * <pre>
 * message ReqBlockTimer extends cMessage
 * {
 *     string filename;
 *     string bid;
 * }
 * </pre>
 */
class ReqBlockTimer : public ::cMessage
{
  protected:
    opp_string filename_var;
    opp_string bid_var;

  private:
    void copy(const ReqBlockTimer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ReqBlockTimer&);

  public:
    ReqBlockTimer(const char *name=NULL, int kind=0);
    ReqBlockTimer(const ReqBlockTimer& other);
    virtual ~ReqBlockTimer();
    ReqBlockTimer& operator=(const ReqBlockTimer& other);
    virtual ReqBlockTimer *dup() const {return new ReqBlockTimer(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getFilename() const;
    virtual void setFilename(const char * filename);
    virtual const char * getBid() const;
    virtual void setBid(const char * bid);
};

inline void doPacking(cCommBuffer *b, ReqBlockTimer& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ReqBlockTimer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>OrionPackets.msg:153</tt> by nedtool.
 * <pre>
 * message ChurnMsg extends cMessage
 * {
 *     string command;
 *     string fileName;
 * }
 * </pre>
 */
class ChurnMsg : public ::cMessage
{
  protected:
    opp_string command_var;
    opp_string fileName_var;

  private:
    void copy(const ChurnMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ChurnMsg&);

  public:
    ChurnMsg(const char *name=NULL, int kind=0);
    ChurnMsg(const ChurnMsg& other);
    virtual ~ChurnMsg();
    ChurnMsg& operator=(const ChurnMsg& other);
    virtual ChurnMsg *dup() const {return new ChurnMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getCommand() const;
    virtual void setCommand(const char * command);
    virtual const char * getFileName() const;
    virtual void setFileName(const char * fileName);
};

inline void doPacking(cCommBuffer *b, ChurnMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ChurnMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>OrionPackets.msg:160</tt> by nedtool.
 * <pre>
 * message QueryMsg extends cMessage
 * {
 *     string fileName;
 *     int seq;
 *     IPvXAddress SRC;
 *     string sourceId;
 * 
 * }
 * </pre>
 */
class QueryMsg : public ::cMessage
{
  protected:
    opp_string fileName_var;
    int seq_var;
    IPvXAddress SRC_var;
    opp_string sourceId_var;

  private:
    void copy(const QueryMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const QueryMsg&);

  public:
    QueryMsg(const char *name=NULL, int kind=0);
    QueryMsg(const QueryMsg& other);
    virtual ~QueryMsg();
    QueryMsg& operator=(const QueryMsg& other);
    virtual QueryMsg *dup() const {return new QueryMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getFileName() const;
    virtual void setFileName(const char * fileName);
    virtual int getSeq() const;
    virtual void setSeq(int seq);
    virtual IPvXAddress& getSRC();
    virtual const IPvXAddress& getSRC() const {return const_cast<QueryMsg*>(this)->getSRC();}
    virtual void setSRC(const IPvXAddress& SRC);
    virtual const char * getSourceId() const;
    virtual void setSourceId(const char * sourceId);
};

inline void doPacking(cCommBuffer *b, QueryMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, QueryMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef _ORIONPACKETS_M_H_

