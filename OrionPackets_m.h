//
// Generated file, do not edit! Created by opp_msgc 4.5 from applications/orionapp/OrionPackets.msg.
//

#ifndef _ORIONPACKETS_M_H_
#define _ORIONPACKETS_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0405
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API 
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API 
#  endif
#endif

// cplusplus {{
#include "IPvXAddress.h"
#include "simtime_t.h"
// }}



/**
 * Enum generated from <tt>applications/orionapp/OrionPackets.msg</tt> by opp_msgc.
 * <pre>
 * enum OrionPacketType
 * {
 *     QUERY = 1;
 *     RESPONSE = 2;
 *     DATA_REQUEST = 3;
 *     DATA_REPLY = 4;
 *     DATA_REQUEST_ACK = 5;
 * };
 * </pre>
 */
enum OrionPacketType {
    QUERY = 1,
    RESPONSE = 2,
    DATA_REQUEST = 3,
    DATA_REPLY = 4,
    DATA_REQUEST_ACK = 5
};

/**
 * Class generated from <tt>applications/orionapp/OrionPackets.msg</tt> by opp_msgc.
 * <pre>
 * packet OrionPacket extends cPacket
 * {
 *     unsigned int packetType;
 *     IPvXAddress SRC;
 *     IPvXAddress LastNode;
 *     unsigned int SEQ;
 * }
 * </pre>
 */
class INET_API OrionPacket : public ::cPacket
{
  protected:
    unsigned int packetType_var;
    IPvXAddress SRC_var;
    IPvXAddress LastNode_var;
    unsigned int SEQ_var;

  private:
    void copy(const OrionPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OrionPacket&);

  public:
    OrionPacket(const char *name=NULL, int kind=0);
    OrionPacket(const OrionPacket& other);
    virtual ~OrionPacket();
    OrionPacket& operator=(const OrionPacket& other);
    virtual OrionPacket *dup() const {return new OrionPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
    virtual IPvXAddress& getSRC();
    virtual const IPvXAddress& getSRC() const {return const_cast<OrionPacket*>(this)->getSRC();}
    virtual void setSRC(const IPvXAddress& SRC);
    virtual IPvXAddress& getLastNode();
    virtual const IPvXAddress& getLastNode() const {return const_cast<OrionPacket*>(this)->getLastNode();}
    virtual void setLastNode(const IPvXAddress& LastNode);
    virtual unsigned int getSEQ() const;
    virtual void setSEQ(unsigned int SEQ);
};

inline void doPacking(cCommBuffer *b, OrionPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OrionPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/orionapp/OrionPackets.msg</tt> by opp_msgc.
 * <pre>
 * class OrionQueryPacket extends OrionPacket
 * {
 *     unsigned int packetType = QUERY;
 *     string filename;
 *  }
 * </pre>
 */
class INET_API OrionQueryPacket : public ::OrionPacket
{
  protected:
    unsigned int packetType_var;
    opp_string filename_var;

  private:
    void copy(const OrionQueryPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OrionQueryPacket&);

  public:
    OrionQueryPacket(const char *name=NULL);
    OrionQueryPacket(const OrionQueryPacket& other);
    virtual ~OrionQueryPacket();
    OrionQueryPacket& operator=(const OrionQueryPacket& other);
    virtual OrionQueryPacket *dup() const {return new OrionQueryPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
    virtual const char * getFilename() const;
    virtual void setFilename(const char * filename);
};

inline void doPacking(cCommBuffer *b, OrionQueryPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OrionQueryPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/orionapp/OrionPackets.msg</tt> by opp_msgc.
 * <pre>
 * class OrionResponsePacket extends OrionPacket
 * {
 *     unsigned int packetType = RESPONSE;
 *     string filename;
 *     unsigned int hopcount;
 *  }
 * </pre>
 */
class INET_API OrionResponsePacket : public ::OrionPacket
{
  protected:
    unsigned int packetType_var;
    opp_string filename_var;
    unsigned int hopcount_var;

  private:
    void copy(const OrionResponsePacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OrionResponsePacket&);

  public:
    OrionResponsePacket(const char *name=NULL);
    OrionResponsePacket(const OrionResponsePacket& other);
    virtual ~OrionResponsePacket();
    OrionResponsePacket& operator=(const OrionResponsePacket& other);
    virtual OrionResponsePacket *dup() const {return new OrionResponsePacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
    virtual const char * getFilename() const;
    virtual void setFilename(const char * filename);
    virtual unsigned int getHopcount() const;
    virtual void setHopcount(unsigned int hopcount);
};

inline void doPacking(cCommBuffer *b, OrionResponsePacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OrionResponsePacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/orionapp/OrionPackets.msg</tt> by opp_msgc.
 * <pre>
 * class OrionDataReqPacket extends OrionPacket
 * {
 *     IPvXAddress DST;
 *     unsigned int packetType = DATA_REQUEST;
 *     string filename;
 *     unsigned int blockNum;
 *     
 * 
 * }
 * </pre>
 */
class INET_API OrionDataReqPacket : public ::OrionPacket
{
  protected:
    IPvXAddress DST_var;
    unsigned int packetType_var;
    opp_string filename_var;
    unsigned int blockNum_var;

  private:
    void copy(const OrionDataReqPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OrionDataReqPacket&);

  public:
    OrionDataReqPacket(const char *name=NULL);
    OrionDataReqPacket(const OrionDataReqPacket& other);
    virtual ~OrionDataReqPacket();
    OrionDataReqPacket& operator=(const OrionDataReqPacket& other);
    virtual OrionDataReqPacket *dup() const {return new OrionDataReqPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPvXAddress& getDST();
    virtual const IPvXAddress& getDST() const {return const_cast<OrionDataReqPacket*>(this)->getDST();}
    virtual void setDST(const IPvXAddress& DST);
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
    virtual const char * getFilename() const;
    virtual void setFilename(const char * filename);
    virtual unsigned int getBlockNum() const;
    virtual void setBlockNum(unsigned int blockNum);
};

inline void doPacking(cCommBuffer *b, OrionDataReqPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OrionDataReqPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/orionapp/OrionPackets.msg</tt> by opp_msgc.
 * <pre>
 * class OrionDataRepPacket extends OrionPacket
 * {
 *     IPvXAddress DST;
 *     unsigned int packetType = DATA_REPLY;
 *     string filename;
 *     unsigned int blockNum;
 * }
 * </pre>
 */
class INET_API OrionDataRepPacket : public ::OrionPacket
{
  protected:
    IPvXAddress DST_var;
    unsigned int packetType_var;
    opp_string filename_var;
    unsigned int blockNum_var;

  private:
    void copy(const OrionDataRepPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OrionDataRepPacket&);

  public:
    OrionDataRepPacket(const char *name=NULL);
    OrionDataRepPacket(const OrionDataRepPacket& other);
    virtual ~OrionDataRepPacket();
    OrionDataRepPacket& operator=(const OrionDataRepPacket& other);
    virtual OrionDataRepPacket *dup() const {return new OrionDataRepPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPvXAddress& getDST();
    virtual const IPvXAddress& getDST() const {return const_cast<OrionDataRepPacket*>(this)->getDST();}
    virtual void setDST(const IPvXAddress& DST);
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
    virtual const char * getFilename() const;
    virtual void setFilename(const char * filename);
    virtual unsigned int getBlockNum() const;
    virtual void setBlockNum(unsigned int blockNum);
};

inline void doPacking(cCommBuffer *b, OrionDataRepPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OrionDataRepPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/orionapp/OrionPackets.msg</tt> by opp_msgc.
 * <pre>
 * class OrionDataReqPacketAck extends OrionPacket
 * {
 * unsigned int packetType = DATA_REQUEST_ACK;
 * }
 * </pre>
 */
class INET_API OrionDataReqPacketAck : public ::OrionPacket
{
  protected:
    unsigned int packetType_var;

  private:
    void copy(const OrionDataReqPacketAck& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OrionDataReqPacketAck&);

  public:
    OrionDataReqPacketAck(const char *name=NULL);
    OrionDataReqPacketAck(const OrionDataReqPacketAck& other);
    virtual ~OrionDataReqPacketAck();
    OrionDataReqPacketAck& operator=(const OrionDataReqPacketAck& other);
    virtual OrionDataReqPacketAck *dup() const {return new OrionDataReqPacketAck(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
};

inline void doPacking(cCommBuffer *b, OrionDataReqPacketAck& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OrionDataReqPacketAck& obj) {obj.parsimUnpack(b);}


#endif // _ORIONPACKETS_M_H_
